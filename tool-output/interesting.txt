come cherrypicked, consensed findings from what has been gathered so far

$ grep Contract -A3 *myth.txt

Contract: AppProxyFactory
Function name: newAppProxyPinned(address,bytes32,bytes)
PC address: 183
A possible integer overflow exists in the function `newAppProxyPinned(address,bytes32,bytes)`.

Contract: AppProxyFactory
Function name: newAppProxy(address,bytes32,bytes)
PC address: 543
A possible integer overflow exists in the function `newAppProxy(address,bytes32,bytes)`.

Contract: Kernel
Function name: newAppInstance(bytes32,address,bytes,bool)
PC address: 11464
A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. 

Contract: MiniMeTokenFactory
Function name: createCloneToken(address,uint256,string,uint8,string,bool)
PC address: 146
A possible integer overflow exists in the function `createCloneToken(address,uint256,string,uint8,string,bool)`.

Contract: MiniMeToken
Function name: name()
PC address: 589
A possible integer overflow exists in the function `name()`.



$ cat *slither.txt

INFO:Detectors: Arbitrary send in aragon-finance-flat.sol Contract: Finance, Function: _deposit, Calls: ['vault.deposit.value(_amount)(ETH,_amount)']

INFO:Detectors: Uninitialized state variable in aragon-finance-flat.sol, Contract: Finance, Variable: periods, Used in ['getPeriod', 'getPeriodTokenStatement', '_newPeriod', '_recordTransaction', '_tryTransitionAccountingPeriod', '_getRemainingBudget']
INFO:Detectors: Uninitialized state variable in aragon-finance-flat.sol, Contract: Finance, Variable: transactions, Used in ['getTransaction', '_recordTransaction']
INFO:Detectors: Uninitialized state variable in aragon-survey-flat.sol, Contract: MiniMeToken, Variable: totalSupplyHistory, Used in ['totalSupplyAt', 'generateTokens', 'destroyTokens']
INFO:Detectors: Uninitialized state variable in aragon-survey-flat.sol, Contract: MiniMeToken, Variable: balances, Used in ['doTransfer', 'balanceOfAt', 'generateTokens', 'destroyTokens']
INFO:Detectors: Uninitialized state variable in aragon-survey-flat.sol, Contract: Survey, Variable: surveys, Used in ['newSurvey', 'resetVote', 'voteOptions', 'voteOption', 'canVote', 'getSurvey', 'getSurveyMetadata', 'getVoterState', 'getOptionPower', 'isParticipationAchieved']
INFO:Detectors: Uninitialized state variable in aragon-voting-flat.sol, Contract: Voting, Variable: votes, Used in ['canVote', 'canExecute', 'getVote', 'getVoteMetadata', 'getVoterState', '_newVote', '_vote', '_executeVote']

cat mcore_vault/global.findings (renamed to aragon-vault-mcore.txt)
mcore results - line numbers reference aragon-vault-flat.sol
aragonapp also scanned, but is a strict subset of vault findings

- Reachable external call to user controlled address via argument -
  Contract: 1154020442637612825834106454889215287898575349970
  EVM Program counter: 0x1bc2
  Solidity snippet:
    818  ERC20(_token).balanceOf(this)

- Warning NUMBER instruction used -
  Contract: 1154020442637612825834106454889215287898575349970
  EVM Program counter: 0x1d24
  Solidity snippet:
    168  block.number

A bunch of int overflows in code that seems to be static constant assignements, which seems strange.
